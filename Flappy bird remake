<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Flappy Bird Replica</title>
  <style>
    body {
      background: linear-gradient(120deg, #74ebd5 0%, #ACB6E5 100%);
      font-family: 'Segoe UI', Arial, sans-serif;
      margin: 0;
      padding: 0;
    }
    h1 {
      text-align: center;
      color: #343d46;
      text-shadow: 2px 2px 8px #fff, 0 0 16px #74ebd5;
      font-size: 2.5rem;
      margin-top: 30px;
      letter-spacing: 2px;
    }
    #gameContainer {
      position: relative;
      width: 400px;
      margin: 30px auto 0 auto;
      padding: 24px 0 24px 0;
      background: rgba(255,255,255,0.15);
      border-radius: 18px;
      box-shadow: 0 8px 32px 0 rgba(31,38,135,0.37);
      border: 1px solid rgba(255,255,255,0.18);
    }
    #gameCanvas {
      border: 4px solid #4fc3f7;
      background: linear-gradient(to bottom, #aaf 0%, #fff 100%);
      display: block;
      border-radius: 12px;
      box-shadow: 0 4px 24px 0 rgba(76,175,80,0.14);
      margin: 0 auto 8px auto;
    }
    #score {
      position: absolute;
      top: 18px;
      left: 24px;
      color: #333;
      background: rgba(255,255,255,0.9);
      padding: 7px 20px;
      border-radius: 20px;
      font-weight: bold;
      font-size: 22px;
      box-shadow: 0 2px 8px rgba(76,175,80,0.08);
      letter-spacing: 1px;
      transition: background 0.25s;
    }
    #score.gameover {
      background: #ff5252;
      color: #fff;
    }
    #startBtn {
      margin-top: 18px;
      padding: 10px 32px;
      font-size: 20px;
      font-weight: bold;
      color: #fff;
      background: linear-gradient(90deg, #f7e065 0%, #4fc3f7 100%);
      border: none;
      border-radius: 24px;
      cursor: pointer;
      box-shadow: 0 2px 8px rgba(76,175,80,0.16);
      outline: none;
      transition: filter 0.2s, background 0.2s;
      margin-left: 50%;
      transform: translateX(-50%);
    }
    #startBtn:disabled {
      filter: grayscale(0.6) blur(0.4px);
      cursor: not-allowed;
      opacity: 0.4;
    }
    #startBtn:hover:enabled {
      background: linear-gradient(90deg, #4fc3f7 0%, #f7e065 100%);
      filter: brightness(1.1);
    }
  </style>
</head>
<body>
  <h1>Flappy Bird Replica</h1>
  <div id="gameContainer">
    <canvas id="gameCanvas" width="400" height="600"></canvas>
    <div id="score">Score: 0</div>
    <button id="startBtn">Start</button>
  </div>
  <script>
    const canvas = document.getElementById("gameCanvas");
    const ctx = canvas.getContext("2d");
    const scoreDiv = document.getElementById("score");
    const startBtn = document.getElementById("startBtn");

    let bird, pipes, score, gameOver, gravity, gap, pipeSpeed;

    function resetGame() {
      bird = { x: 80, y: 300, w: 30, h: 30, vy: 0 };
      pipes = [];
      score = 0;
      gameOver = false;
      gravity = 0.3; // slower fall
      gap = 150;
      pipeSpeed = 2;
      scoreDiv.textContent = "Score: 0";
      scoreDiv.classList.remove("gameover");
    }

    function drawBird() {
      // Bird body
      ctx.save();
      ctx.shadowColor = "#f7e065";
      ctx.shadowBlur = 10;
      ctx.beginPath();
      ctx.arc(bird.x, bird.y, bird.w / 2, 0, Math.PI * 2);
      ctx.fillStyle = "#f7e065";
      ctx.fill();
      ctx.shadowBlur = 0;
      // Eye
      ctx.beginPath();
      ctx.arc(bird.x + 7, bird.y - 6, 4, 0, Math.PI * 2);
      ctx.fillStyle = "#333";
      ctx.fill();
      // Beak
      ctx.beginPath();
      ctx.moveTo(bird.x + 15, bird.y);
      ctx.lineTo(bird.x + 23, bird.y - 3);
      ctx.lineTo(bird.x + 15, bird.y + 5);
      ctx.fillStyle = "#ff5252";
      ctx.fill();
      ctx.restore();
    }

    function drawPipes() {
      pipes.forEach(pipe => {
        // Top pipe
        const gradTop = ctx.createLinearGradient(pipe.x, 0, pipe.x + pipe.w, pipe.top);
        gradTop.addColorStop(0, "#43ea7b");
        gradTop.addColorStop(1, "#39c865");
        ctx.fillStyle = gradTop;
        ctx.fillRect(pipe.x, 0, pipe.w, pipe.top);
        ctx.beginPath();
        ctx.arc(pipe.x + pipe.w / 2, pipe.top, pipe.w / 2, Math.PI, 0);
        ctx.fillStyle = "#43ea7b";
        ctx.fill();

        // Bottom pipe
        const gradBot = ctx.createLinearGradient(pipe.x, pipe.top + gap, pipe.x + pipe.w, canvas.height);
        gradBot.addColorStop(0, "#43ea7b");
        gradBot.addColorStop(1, "#39c865");
        ctx.fillStyle = gradBot;
        ctx.fillRect(pipe.x, pipe.top + gap, pipe.w, canvas.height - pipe.top - gap);
        ctx.beginPath();
        ctx.arc(pipe.x + pipe.w / 2, pipe.top + gap, pipe.w / 2, 0, Math.PI);
        ctx.fillStyle = "#43ea7b";
        ctx.fill();
      });
    }

    function updatePipes() {
      if (pipes.length === 0 || pipes[pipes.length - 1].x < canvas.width - 200) {
        const top = Math.random() * (canvas.height - gap - 80) + 40;
        pipes.push({ x: canvas.width, w: 50, top });
      }
      pipes.forEach(pipe => pipe.x -= pipeSpeed);
      if (pipes[0] && pipes[0].x + pipes[0].w < 0) pipes.shift();
    }

    function checkCollision() {
      // Ground or ceiling
      if (bird.y + bird.h / 2 > canvas.height || bird.y - bird.h / 2 < 0) return true;
      // Pipes
      for (let pipe of pipes) {
        if (
          bird.x + bird.w / 2 > pipe.x &&
          bird.x - bird.w / 2 < pipe.x + pipe.w &&
          (bird.y - bird.h / 2 < pipe.top || bird.y + bird.h / 2 > pipe.top + gap)
        ) return true;
      }
      return false;
    }

    function updateScore() {
      pipes.forEach(pipe => {
        if (!pipe.passed && pipe.x + pipe.w < bird.x) {
          score += 1;
          pipe.passed = true;
          scoreDiv.textContent = "Score: " + score;
        }
      });
    }

    function gameLoop() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      bird.vy += gravity;
      bird.y += bird.vy;

      updatePipes();
      drawPipes();
      drawBird();

      updateScore();

      if (checkCollision()) {
        gameOver = true;
        scoreDiv.textContent = "Game Over! Score: " + score;
        scoreDiv.classList.add("gameover");
        startBtn.disabled = false;
        return;
      }

      if (!gameOver) requestAnimationFrame(gameLoop);
    }

    document.addEventListener("keydown", e => {
      if (e.code === "Space" && !gameOver) {
        bird.vy = -8;
      }
    });

    canvas.addEventListener("mousedown", () => {
      if (!gameOver) bird.vy = -8;
    });

    startBtn.onclick = () => {
      resetGame();
      startBtn.disabled = true;
      gameLoop();
    };

    resetGame();
  </script>
</body>
</html>
